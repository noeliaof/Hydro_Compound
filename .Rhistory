y = 1.05,
text = 'Miles/(US) gallon',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
fig
library(plotly)
# custom grid style
axx <- list(
gridcolor='rgb(255, 255, 255)',
zerolinecolor='rgb(255, 255, 255)',
showbackground=TRUE,
backgroundcolor='rgb(230, 230,230)'
)
# individual plots
fig1 <- plot_ly(z = ~volcano, scene='scene1')
fig1 <- fig1 %>% add_surface(showscale=FALSE)
fig2 <- plot_ly(z = ~volcano, scene='scene2')
fig2 <- fig2 %>% add_surface(showscale=FALSE)
fig3 <- plot_ly(z = ~volcano, scene='scene3')
fig3 <- fig3 %>% add_surface(showscale=FALSE)
fig4 <- plot_ly(z = ~volcano, scene='scene4')
fig4 <- fig4 %>% add_surface(showscale=FALSE)
# subplot and define scene
fig <- subplot(fig1, fig2, fig3, fig4)
fig <- fig %>% layout(title = "3D Subplots",
scene = list(domain=list(x=c(0,0.5),y=c(0.5,1)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'),
scene2 = list(domain=list(x=c(0.5,1),y=c(0.5,1)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'),
scene3 = list(domain=list(x=c(0,0.5),y=c(0,0.5)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'),
scene4 = list(domain=list(x=c(0.5,1),y=c(0,0.5)),
xaxis=axx, yaxis=axx, zaxis=axx,
aspectmode='cube'))
fig
library(plot3D)
# number of data points.
npoints = 20
# generate sequences for X,Y values
x = runif(npoints,1,20)
y = runif(npoints,1,20)
# generate random numbers between (0,30) for Z values
z = 30*runif(npoints)
# Call to scatter3D function
scatter3D(x,y,z,box=TRUE,pch=16,bty="b2",axes=TRUE,label=TRUE, nticks=5, ticktype="detailed",theta=40, phi=40, xlab="X-val", ylab="Y-val", zlab="Z-val", main="3D scatter plot")
\textcolor{red}{where $P$ is the probability of occurrence P(ECE=1|$X_{wr}$), i.e. the probability of occurrence of an energy compound event (ECE=1) for a given WR, and $\beta_{wr}$ are the regression coefficients of the categorical variable $X_{wr}$ that represent the weather regimes classes.
+
setwd("~/Documents/OCCR/scripts/R")
source("./config/ConfigureEnv.R")
ConfigureEnv();
hydro_prod <- readxl::read_xlsx("../../data/BFE_stats/9605-Zeitreihe_ElektrizitÃ¤tsproduktion_Wasserkraft_nach_Kraftwerkstyp.xlsx", skip=7)
hydro_prod$...4 <- NULL
names(hydro_prod) <- c("Year-Month", "run-of-river","reservoir", "total")
dfm_mon <- organize_mon_prodxls(hydro_prod)
dfm_mon2 <- dfm_mon%>%dplyr::select(ror,re,date)
# divide 24*30 (hourly per month)
dfm_mon2 <- dfm_mon2%>%group_by(date)%>%dplyr::mutate(ror=ror/(24*30), re=re/(24*30))
dfm_mon2 <- data.frame(dfm_mon2)
p <- dfm_mon2%>%pivot_longer(-date,names_to="type", values_to="value")%>%dplyr::filter(format(date,"%Y")>"2015")%>%
ggplot2::ggplot(aes(format(date,"%Y"), value, fill=type)) + ylab("GW") + xlab("")+ scale_fill_brewer(palette = "Set1") +
geom_boxplot() + theme_classic()
pmon <- dfm_mon2%>%pivot_longer(-date,names_to="type", values_to="value")%>%dplyr::filter(format(date,"%Y")>"2015")%>%
ggplot2::ggplot(aes(format(date,"%m"), value, fill=type)) + ylab("GW") + xlab("")+ scale_fill_brewer(palette = "Set1") +
geom_boxplot() + theme_classic()
pmon
p
# load("../../data/Output_data/csv/Observed_discharge_entsoe_powerplants/data_merged_index.Rda")
dir_recons <- '/Users/noeliaotero/Documents/OCCR/data/Output_data/csv/outmodels/Classical/'
l_files <- list.files(dir_recons)
station_name <- tools::file_path_sans_ext(l_files)
r_data <- lapply(1:length(l_files), function(i) read.csv(paste(dir_recons, l_files[i], sep=""), row.names = 1))
names(r_data) <- station_name
dff    <- reshape2::melt(r_data, id=names(r_data[[1]]))
names(dff) <- c(names(r_data[[1]]),"station")
dff$date <- as.Date(dff$date)
names
r_data <- lapply(1:length(l_files), function(i) read.csv(paste(dir_recons, l_files[i], sep="")))
names(r_data) <- station_name
dff    <- reshape2::melt(r_data, id=names(r_data[[1]]))
names(dff) <- c(names(r_data[[1]]),"station")
dff$date <- as.Date(dff$date)
# select two
dff_s <- dff%>%dplyr::filter(name_p%in%c("KW Rheinfelden CH","AET Leventina"))
d1 <- dff_s%>%dplyr::filter(format(date,"%Y")>"2015")%>%ggplot2::ggplot(aes(format(date,"%Y"), generation, fill=type_g)) + ylab("MW") + xlab("")+ scale_fill_brewer(palette = "Set2") +
geom_boxplot() + theme_classic()
d2 <- dff_s%>%dplyr::filter(format(date,"%Y")>"2015")%>%ggplot2::ggplot(aes(format(date,"%m"), generation, fill=type_g)) + ylab("MW") + xlab("")+ scale_fill_brewer(palette = "Set2") +
geom_boxplot() + theme_classic()
d1
d1 <- dff_s%>%dplyr::filter(format(date,"%Y"))%>%ggplot2::ggplot(aes(format(date,"%Y"), generation, fill=type_g)) + ylab("MW") + xlab("")+ scale_fill_brewer(palette = "Set2") +
geom_boxplot() + theme_classic()
d2 <- dff_s%>%dplyr::filter(format(date,"%Y"))%>%ggplot2::ggplot(aes(format(date,"%m"), generation, fill=type_g)) + ylab("MW") + xlab("")+ scale_fill_brewer(palette = "Set2") +
geom_boxplot() + theme_classic()
d1 <- dff_s%>%ggplot2::ggplot(aes(format(date,"%Y"), generation, fill=type_g)) + ylab("MW") + xlab("")+ scale_fill_brewer(palette = "Set2") +
geom_boxplot() + theme_classic()
d2 <- dff_s%>%ggplot2::ggplot(aes(format(date,"%m"), generation, fill=type_g)) + ylab("MW") + xlab("")+ scale_fill_brewer(palette = "Set2") +
geom_boxplot() + theme_classic()
d1
head(dff_s)
d1 <- dff_s%>%ggplot2::ggplot(aes(format(date,"%Y"), pred_randomforest, fill=type_g)) + ylab("MW") + xlab("")+ scale_fill_brewer(palette = "Set2") +
geom_boxplot() + theme_classic()
d2 <- dff_s%>%ggplot2::ggplot(aes(format(date,"%m"), pred_randomforest, fill=type_g)) + ylab("MW") + xlab("")+ scale_fill_brewer(palette = "Set2") +
geom_boxplot() + theme_classic()
d1
d2
pf1 <- dfm_mon2%>%pivot_longer(-date,names_to="type", values_to="value")%>%
ggplot2::ggplot(aes(format(date,"%Y"), value, fill=type)) + ylab("GW") + xlab("")+ scale_fill_brewer(palette = "Set1") +
geom_boxplot() + theme_classic()
pf2 <- dfm_mon2%>%pivot_longer(-date,names_to="type", values_to="value")%>%
ggplot2::ggplot(aes(format(date,"%m"), value, fill=type)) + ylab("GW") + xlab("")+ scale_fill_brewer(palette = "Set1") +
geom_boxplot() + theme_classic()
plot_grid(d1, pf1)
plot_grid(d1, pf1, ncol=1)
dff_s
dff_s$type <- ifelse(dff_s$type_g == "")
unique(dff_s$type_g)
dff_s$type <- ifelse(dff_s$type_g == "Hydro Run-of-river and poundage")
dff_s$type <- ifelse(dff_s$type_g == "Hydro Run-of-river and poundage", "ror", "re")
d1 <- dff_s%>%ggplot2::ggplot(aes(format(date,"%Y"), pred_randomforest, fill=type)) + ylab("MW") + xlab("")+ scale_fill_brewer(palette = "Set2") +
geom_boxplot() + theme_classic()
d2 <- dff_s%>%ggplot2::ggplot(aes(format(date,"%m"), pred_randomforest, fill=type)) + ylab("MW") + xlab("")+ scale_fill_brewer(palette = "Set2") +
geom_boxplot() + theme_classic()
pf1 <- dfm_mon2%>%pivot_longer(-date,names_to="type", values_to="value")%>%
ggplot2::ggplot(aes(format(date,"%Y"), value, fill=type)) + ylab("GW") + xlab("")+ scale_fill_brewer(palette = "Set1") +
geom_boxplot() + theme_classic()
pf2 <- dfm_mon2%>%pivot_longer(-date,names_to="type", values_to="value")%>%
ggplot2::ggplot(aes(format(date,"%m"), value, fill=type)) + ylab("GW") + xlab("")+ scale_fill_brewer(palette = "Set1") +
geom_boxplot() + theme_classic()
plot_grid( pf1, d1, ncol=1)
pf1 <- dfm_mon2%>%pivot_longer(-date,names_to="type", values_to="value")%>%dplyr::filter(format(date,"%Y")>"1990")%>%
ggplot2::ggplot(aes(format(date,"%Y"), value, fill=type)) + ylab("GW") + xlab("")+ scale_fill_brewer(palette = "Set1") +
geom_boxplot() + theme_classic()
pf2 <- dfm_mon2%>%pivot_longer(-date,names_to="type", values_to="value")%>%dplyr::filter(format(date,"%Y")>"1990")%>%
ggplot2::ggplot(aes(format(date,"%m"), value, fill=type)) + ylab("GW") + xlab("")+ scale_fill_brewer(palette = "Set1") +
geom_boxplot() + theme_classic()
plot_grid( pf1, d1, ncol=1)
plot_grid( pf2, d2,  ncol=1)
onacopula("Joe", C(theta, 1:3))
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/")
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound/")
source("./config/ConfigureEnv.R")
ConfigureEnv();
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound/config/")
source("./config/ConfigureEnv.R")
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound")
source("./config/ConfigureEnv.R")
ConfigureEnv();
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound")
source("./config/ConfigureEnv.R")
ConfigureEnv();
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound/")
source("./config/ConfigureEnv.R")
ConfigureEnv();
h the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound/")
getwd
getwd()
source("./config/ConfigureEnv.R")
ConfigureEnv();
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound/")
source("./config/ConfigureEnv.R")
ConfigureEnv();
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound/")
source("./config/ConfigureEnv.R")
ConfigureEnv();
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound")
source("./config/ConfigureEnv.R")
ConfigureEnv();
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound")
getwd
getwd()
list.files()
list.files("config/")
source("config/ConfigureEnv.R")
ConfigureEnv();
source("config/ConfigureEnv.R")
list.files(".")
list.files("./config/")
## Exploratory analysis to see how proceed with the compound analysis
# load and prepare env.
# Impact hot-dry HP
# Meta-Gaussian approach
setwd("~/Documents/OCCR/Hydro_Compound")
source("config/ConfigureEnv.R")
ConfigureEnv();
#load reconstructed data
dir_recons <- '/Users/noeliaotero/Documents/OCCR/Hydro_Compound/data/Classical'
#load reconstructed data
dir_recons <- '/Users/noeliaotero/Documents/OCCR/Hydro_Compound/data/Classical/'
dir_month_recons <- '/Users/noeliaotero/Documents/OCCR/Hydro_Compound/data/Classical/monthly/'
l_files <- list.files(dir_recons, pattern = "csv")
station_name <- tools::file_path_sans_ext(l_files)
# Impact hot-dry-HP
# Copula approach
setwd("~/Documents/OCCR/scripts/R")
source("./config/ConfigureEnv.R")
ConfigureEnv();
#load data
setwd("~/Documents/OCCR/Hydro_Compound")
source("config/ConfigureEnv.R")
ConfigureEnv();
#load reconstructed data
# Daily
dir_recons <- '/Users/noeliaotero/Documents/OCCR/Hydro_Compound/data/Classical/'
l_files <- list.files(dir_recons, pattern = "csv")
station_name <- tools::file_path_sans_ext(l_files)
r_data <- lapply(1:length(l_files), function(i) read.csv(paste(dir_recons, l_files[i], sep="")))
names(r_data) <- station_name
## read monthly
dir_month_recons <- '/Users/noeliaotero/Documents/OCCR/Hydro_Compound/data/Classical/monthly/'
l_mon_files <- list.files(dir_month_recons, pattern = "csv")
r_mon_data <- lapply(1:length(l_mon_files), function(i) read.csv(paste(dir_month_recons, l_mon_files[i], sep="")))
names(r_mon_data) <- station_name
####################
# Copula analysis
###################
# ---------------------------------------------
# Analysis with reconstructed hydro-generation
mvars <- c("pred","spei_3","STI_1") # try tmax
build_3cop <- function(df_case_mon, mvars, th=0.2, u_spei, u_sti ){
# Function to fit tri-variate copula
#' @df_case_mon: monthly data for one power plant
#' @mvars: names of the variables (pred, spei_3, STI_1)
#' @th: threshold for the hydropower
#' @u_spei: threshold for spei
#' @u_sti: threshold for sti
dd <- data.frame(df_case_mon[,mvars])
# remove na
dd <- na.omit(dd)
# check dependence between variables
# transform to univariate marginals
U <- pobs(dd)
pairs(as.copuladata(U))
# parametric marginals
# for generation I will use gamma
m1 <-  myfits(dd[,1], "gamma", NULL)
m2 <-  myfits(dd[,2], "none", NULL)
m3 <-  myfits(dd[,3], "none", NULL)
param1   <- m1[[2]]
param2   <- m2[[2]]
param3  <- m3[[2]]
# parametric marginals
f1 <- m1[[3]]
f2 <- m2[[3]]
f3 <- m3[[3]]
# keep margins information
info_mar <- rbind.data.frame("marg1"=m1[[1]],"marg2"=m2[[1]], "marg3" = m3[[1]])
## A trivariate normal copula
cop_model <- normalCopula( dim = 3, dispstr = "un")
cop_fit   <-  fitCopula(cop_model, U, method = 'ml')
my_cop     <- normalCopula(param=coef(cop_fit), dim=3, dispstr = "un")
check <- gofCopula(cop_model, U,simulation = "mult", estim.method = "mpl")
cat("the pvalue for the copula is:",check$p.value)
if(check$p.value<0.05){cat("not a good fit")}
df_cop <- data.frame( "param" = my_cop@parameters, "check"=check$p.value)
Nr <- 10000
sim <-  rCopula(Nr, my_cop) # sample for the selected copula
par(mfrow=c(1,3))
plot(sim[,1],sim[,2],col='blue', main = "Gaussian",xlab = "u1", ylab = "u2")
plot(sim[,2],sim[,3],col='red', main = "Gaussian",xlab = "u2", ylab = "u3")
plot(sim[,1],sim[,3],col='grey', main = "Gaussian",xlab = "u1", ylab = "u3")
cat("correlation sample", "\n")
cor(sim,method='spearman') #
cat("correlation my data","\n")
cor(dd, method= "spearman", use = "complete")
# simulate distribution based on marginals
my.dis <- mvdc(my_cop, margins = c(info_mar$nam.mar[1], info_mar$nam.mar[2],info_mar$nam.mar[3] ),
paramMargins = list(list(param1), list(param2), list(param3)))
my.sim <- rMvdc(Nr, my.dis)
# ----------define thresholds--------
trsh_u1 = quantile(U[,1], probs = th)
#trsh_u1 <- 0
# Fixed threshold---comparison RF
tf1 <- quantile(dd[,1],0.2)
mp  <- m_sim <- m_emp <- m_cond <-     matrix(0, nrow = length(u_spei), ncol = length(u_spei))
rownames(mp) <- rownames(m_cond) <-  rownames(m_emp) <- u_spei
colnames(mp) <- colnames(m_cond) <-  rownames(m_emp) <- u_sti
for(i in 1:(length(u_spei))){
for(j in 1:(length(u_sti))){
Fs <-  univar_f(m2, dat=u_spei[i])[[1]]
Ft <- univar_f(m3,  dat=u_sti[j])[[1]]
cat ("probability for", u_spei[i],":",Fs,"and",u_sti[j],"Ft", Ft,"\n")
if( u_spei[i] < 0 &  u_sti[j] > 0){
cat("hot-dry","\n")
# P(X1<x1, X2>x2, X3<x3) =  P(X1<x1, X3<x3) - P(X1<x1, X2<x2, X3<x3) = C13-C123
mp[i,j] <- pCopula(c(0.2,Fs,Inf), copula=my_cop) - pCopula(c(0.2,Fs,Ft), copula = my_cop)
m_sim[i,j] <- mean(my.sim[,1]< tf1 & my.sim[,2]< (Fs) & my.sim[,3]> (Ft))
# P( X1 < x1| X2<x2, X3>x3) = P(X1<x1,X2<x2 ) - P( X1 < x1, X2<x2, X3<x3) /P(X2<x2)- P(X2<x2, X3<x3)
m_cond[i,j] <- (pCopula(c(0.2,Fs,Inf), copula=my_cop) - pCopula(c(0.2,Fs,Ft), copula = my_cop))/(Fs-pCopula(c(-Inf,Fs,Ft), copula = my_cop))
}else if(u_spei[i] > 0 &  u_sti[j] < 0){
cat("cold-wet","\n")
# P(X1>x1, X2<x2, X3<x3) = P(X3<x3, X2<x2) - P( X1 < x1, X2<x2, X3<x3) ????
# Not working...
mp[i,j] <- pCopula(c(0.2, Inf, Ft), copula=my_cop) - pCopula(c(0.2,Fs,Ft), copula = my_cop)
m_sim[i,j] <- mean(my.sim[,1]< tf1 & my.sim[,2] > (Fs) & my.sim[,3] < (Ft))
# P( X1 < x1| X2<x2, X3>x3) = P(X1<x1,X2<x2 ) - P( X1 < x1, X2<x2, X3<x3) /P(X2<x2)- P(X2<x2, X3<x3)
m_cond[i,j] <- (pCopula(c(0.2,-Inf, Ft), copula=my_cop) - pCopula(c(0.2,Fs,Ft), copula = my_cop))/(Ft-pCopula(c(-Inf,Fs,Ft), copula = my_cop))
}else if(u_spei[i] < 0 &u_sti[j] < 0){
cat("cold-dry","\n")
mp[i,j]    <- pCopula(c(0.2,Fs,Ft), copula = my_cop)
m_sim[i,j] <- mean(my.sim[,1]< tf1 & my.sim[,2] < (Fs) & my.sim[,3] < (Ft))
# P( X1 < x1| X2<x2, X3>x3) = P(X1<x1,X2<x2 ) - P( X1 < x1, X2<x2, X3<x3) /P(X2<x2)- P(X2<x2, X3<x3)
m_cond[i,j] <- 1-pCopula(c(0.2,Fs,Ft), copula = my_cop)
}else if(u_spei[i] > 0 &u_sti[j] > 0){
cat("wet-hot","\n")
# P(X1>x1, X2>x2, X3<x3) = P(X3<x3) - P(X3<x3, X1<x1) - P(X3<x3, X2<x2) + P( X1 < x1, X2<x2, X3<x3)
mp[i,j]    <- 0.2 - pCopula(c(0.2, -Inf, Ft), copula=my_cop) - pCopula(c(0.2, Fs, Inf), copula=my_cop) + pCopula(c(0.2,Fs,Ft), copula = my_cop)
m_sim[i,j] <- mean(my.sim[,1]< tf1 & my.sim[,2] > (Fs) & my.sim[,3] > (Ft))
#  need to check this
m_cond[i,j] <- 1-pCopula(c(0.2,Fs,Ft), copula = my_cop)
}
# m_emp[i,j] <- sum(dd[,1]<tf1 & dd[,2] < (Fs) & dd[,3] > (Ft)) /(length(dd[,1]))
}
}
return(list("mat_and" = mp, "mat_or" = m_cond, "check" = df_cop))
}
# Apply the cop. for each power plant
out <- list()
for(i in 1:length(r_mon_data)){
df_case_mon <- list_dat[[i]]
u_spei <- seq(-2.0, 2, 0.5)
u_sti <- seq(-2, 2.0, 0.5)
out[[i]] <- build_3cop(df_case_mon, mvars, th=0.2, u_spei, u_sti)
}
# Apply the cop. for each power plant
out <- list()
for(i in 1:length(r_mon_data)){
df_case_mon <- r_mon_data[[i]]
u_spei <- seq(-2.0, 2, 0.5)
u_sti <- seq(-2, 2.0, 0.5)
out[[i]] <- build_3cop(df_case_mon, mvars, th=0.2, u_spei, u_sti)
}
# Impact hot-dry-HP
# Copula approach
setwd("~/Documents/OCCR/scripts/R")
source("./config/ConfigureEnv.R")
ConfigureEnv();
#load data
setwd("~/Documents/OCCR/Hydro_Compound")
source("config/ConfigureEnv.R")
ConfigureEnv();
#load reconstructed data
# Daily
dir_recons <- '/Users/noeliaotero/Documents/OCCR/Hydro_Compound/data/Classical/'
l_files <- list.files(dir_recons, pattern = "csv")
station_name <- tools::file_path_sans_ext(l_files)
r_data <- lapply(1:length(l_files), function(i) read.csv(paste(dir_recons, l_files[i], sep="")))
names(r_data) <- station_name
## read monthly
dir_month_recons <- '/Users/noeliaotero/Documents/OCCR/Hydro_Compound/data/Classical/monthly/'
l_mon_files <- list.files(dir_month_recons, pattern = "csv")
r_mon_data <- lapply(1:length(l_mon_files), function(i) read.csv(paste(dir_month_recons, l_mon_files[i], sep="")))
names(r_mon_data) <- station_name
####################
# Copula analysis
###################
# ---------------------------------------------
# Analysis with reconstructed hydro-generation
mvars <- c("pred","spei_3","STI_1") # try tmax
build_3cop <- function(df_case_mon, mvars, th=0.2, u_spei, u_sti ){
# Function to fit tri-variate copula
#' @df_case_mon: monthly data for one power plant
#' @mvars: names of the variables (pred, spei_3, STI_1)
#' @th: threshold for the hydropower
#' @u_spei: threshold for spei
#' @u_sti: threshold for sti
dd <- data.frame(df_case_mon[,mvars])
# remove na
dd <- na.omit(dd)
# check dependence between variables
# transform to univariate marginals
U <- pobs(dd)
pairs(as.copuladata(U))
# parametric marginals
# for generation I will use gamma
m1 <-  myfits(dd[,1], "gamma", NULL)
m2 <-  myfits(dd[,2], "none", NULL)
m3 <-  myfits(dd[,3], "none", NULL)
param1   <- m1[[2]]
param2   <- m2[[2]]
param3  <- m3[[2]]
# parametric marginals
f1 <- m1[[3]]
f2 <- m2[[3]]
f3 <- m3[[3]]
# keep margins information
info_mar <- rbind.data.frame("marg1"=m1[[1]],"marg2"=m2[[1]], "marg3" = m3[[1]])
## A trivariate normal copula
cop_model <- normalCopula( dim = 3, dispstr = "un")
cop_fit   <-  fitCopula(cop_model, U, method = 'ml')
my_cop     <- normalCopula(param=coef(cop_fit), dim=3, dispstr = "un")
check <- gofCopula(cop_model, U,simulation = "mult", estim.method = "mpl")
cat("the pvalue for the copula is:",check$p.value)
if(check$p.value<0.05){cat("not a good fit")}
df_cop <- data.frame( "param" = my_cop@parameters, "check"=check$p.value)
Nr <- 10000
sim <-  rCopula(Nr, my_cop) # sample for the selected copula
par(mfrow=c(1,3))
plot(sim[,1],sim[,2],col='blue', main = "Gaussian",xlab = "u1", ylab = "u2")
plot(sim[,2],sim[,3],col='red', main = "Gaussian",xlab = "u2", ylab = "u3")
plot(sim[,1],sim[,3],col='grey', main = "Gaussian",xlab = "u1", ylab = "u3")
cat("correlation sample", "\n")
cor(sim,method='spearman') #
cat("correlation my data","\n")
cor(dd, method= "spearman", use = "complete")
# simulate distribution based on marginals
my.dis <- mvdc(my_cop, margins = c(info_mar$nam.mar[1], info_mar$nam.mar[2],info_mar$nam.mar[3] ),
paramMargins = list(list(param1), list(param2), list(param3)))
my.sim <- rMvdc(Nr, my.dis)
# ----------define thresholds--------
trsh_u1 = quantile(U[,1], probs = th)
#trsh_u1 <- 0
# Fixed threshold---comparison RF
tf1 <- quantile(dd[,1],0.2)
mp  <- m_sim <- m_emp <- m_cond <-     matrix(0, nrow = length(u_spei), ncol = length(u_spei))
rownames(mp) <- rownames(m_cond) <-  rownames(m_emp) <- u_spei
colnames(mp) <- colnames(m_cond) <-  rownames(m_emp) <- u_sti
for(i in 1:(length(u_spei))){
for(j in 1:(length(u_sti))){
Fs <-  univar_f(m2, dat=u_spei[i])[[1]]
Ft <- univar_f(m3,  dat=u_sti[j])[[1]]
cat ("probability for", u_spei[i],":",Fs,"and",u_sti[j],"Ft", Ft,"\n")
if( u_spei[i] < 0 &  u_sti[j] > 0){
cat("hot-dry","\n")
# P(X1<x1, X2>x2, X3<x3) =  P(X1<x1, X3<x3) - P(X1<x1, X2<x2, X3<x3) = C13-C123
mp[i,j] <- pCopula(c(0.2,Fs,Inf), copula=my_cop) - pCopula(c(0.2,Fs,Ft), copula = my_cop)
m_sim[i,j] <- mean(my.sim[,1]< tf1 & my.sim[,2]< (Fs) & my.sim[,3]> (Ft))
# P( X1 < x1| X2<x2, X3>x3) = P(X1<x1,X2<x2 ) - P( X1 < x1, X2<x2, X3<x3) /P(X2<x2)- P(X2<x2, X3<x3)
m_cond[i,j] <- (pCopula(c(0.2,Fs,Inf), copula=my_cop) - pCopula(c(0.2,Fs,Ft), copula = my_cop))/(Fs-pCopula(c(-Inf,Fs,Ft), copula = my_cop))
}else if(u_spei[i] > 0 &  u_sti[j] < 0){
cat("cold-wet","\n")
# P(X1>x1, X2<x2, X3<x3) = P(X3<x3, X2<x2) - P( X1 < x1, X2<x2, X3<x3) ????
# Not working...
mp[i,j] <- pCopula(c(0.2, Inf, Ft), copula=my_cop) - pCopula(c(0.2,Fs,Ft), copula = my_cop)
m_sim[i,j] <- mean(my.sim[,1]< tf1 & my.sim[,2] > (Fs) & my.sim[,3] < (Ft))
# P( X1 < x1| X2<x2, X3>x3) = P(X1<x1,X2<x2 ) - P( X1 < x1, X2<x2, X3<x3) /P(X2<x2)- P(X2<x2, X3<x3)
# m_cond[i,j] <- (pCopula(c(0.2,-Inf, Ft), copula=my_cop) - pCopula(c(0.2,Fs,Ft), copula = my_cop))/(Ft-pCopula(c(-Inf,Fs,Ft), copula = my_cop))
}else if(u_spei[i] < 0 &u_sti[j] < 0){
cat("cold-dry","\n")
mp[i,j]    <- pCopula(c(0.2,Fs,Ft), copula = my_cop)
m_sim[i,j] <- mean(my.sim[,1]< tf1 & my.sim[,2] < (Fs) & my.sim[,3] < (Ft))
# P( X1 < x1| X2<x2, X3>x3) = P(X1<x1,X2<x2 ) - P( X1 < x1, X2<x2, X3<x3) /P(X2<x2)- P(X2<x2, X3<x3)
m_cond[i,j] <- 1-pCopula(c(0.2,Fs,Ft), copula = my_cop)
}else if(u_spei[i] > 0 &u_sti[j] > 0){
cat("wet-hot","\n")
# P(X1>x1, X2>x2, X3<x3) = P(X3<x3) - P(X3<x3, X1<x1) - P(X3<x3, X2<x2) + P( X1 < x1, X2<x2, X3<x3)
mp[i,j]    <- 0.2 - pCopula(c(0.2, -Inf, Ft), copula=my_cop) - pCopula(c(0.2, Fs, Inf), copula=my_cop) + pCopula(c(0.2,Fs,Ft), copula = my_cop)
m_sim[i,j] <- mean(my.sim[,1]< tf1 & my.sim[,2] > (Fs) & my.sim[,3] > (Ft))
#  need to check this
m_cond[i,j] <- 1-pCopula(c(0.2,Fs,Ft), copula = my_cop)
}
# m_emp[i,j] <- sum(dd[,1]<tf1 & dd[,2] < (Fs) & dd[,3] > (Ft)) /(length(dd[,1]))
}
}
return(list("mat_and" = mp, "mat_or" = m_cond, "check" = df_cop))
}
# Apply the cop. for each power plant
out <- list()
for(i in 1:length(r_mon_data)){
df_case_mon <- r_mon_data[[i]]
u_spei <- seq(-2.0, 2, 0.5)
u_sti <- seq(-2, 2.0, 0.5)
out[[i]] <- build_3cop(df_case_mon, mvars, th=0.2, u_spei, u_sti)
}
source('~/Documents/OCCR/Hydro_Compound/Impact_hotdry_HP_02.R')
